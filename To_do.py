tarefas = []            # Cria uma lista vazia chamada 'tarefas' para armazenar as tarefas
historico = []          # Cria uma lista vazia chamada 'historico' para armazenar o hist√≥rico de tarefas (pilha)
fila_execucao = []      # Cria uma lista vazia chamada 'fila_execucao' para armazenar as tarefas em uma fila (FIFO)

def adicionar_tarefa(tarefa):  # Define uma fun√ß√£o para adicionar uma tarefa √†s listas
    tarefas.append(tarefa)  # O m√©todo append adiciona o valor 'tarefa' ao final da lista 'tarefas'
    historico.append(tarefa)  # O m√©todo append adiciona o valor 'tarefa' ao final da lista 'historico'
    fila_execucao.append(tarefa)  # O m√©todo append adiciona o valor 'tarefa' ao final da lista 'fila_execucao'
    print(f"Tarefa '{tarefa}' adicionada!\n")  # Exibe uma mensagem formatada com a tarefa adicionada

def desfazer_ultima_tarefa():  # Define uma fun√ß√£o para desfazer a √∫ltima tarefa adicionada
    if historico:  # Verifica se a lista 'historico' n√£o est√° vazia
        ultima = historico.pop()  # O m√©todo pop remove e retorna o √∫ltimo elemento da lista 'historico'
        tarefas.remove(ultima)  # O m√©todo remove exclui o valor 'ultima' da lista 'tarefas'
        fila_execucao.remove(ultima)  # O m√©todo remove exclui o valor 'ultima' da lista 'fila_execucao'
        print(f"Tarefa '{ultima}' desfeita!\n")  # Exibe uma mensagem formatada com a tarefa desfeita
    else:
        print("Nenhuma tarefa para desfazer.\n")  # Exibe uma mensagem caso n√£o haja tarefas no hist√≥rico

def atender_tarefa():  # Define uma fun√ß√£o para atender a pr√≥xima tarefa na fila
    if fila_execucao:  # Verifica se a lista 'fila_execucao' n√£o est√° vazia
        feita = fila_execucao.pop(0)  # O m√©todo pop(0) remove e retorna o primeiro elemento da lista 'fila_execucao'
        tarefas.remove(feita)  # O m√©todo remove exclui o valor 'feita' da lista 'tarefas'
        print(f"Tarefa '{feita}' atendida!\n")  # Exibe uma mensagem formatada com a tarefa atendida
    else:
        print("Nenhuma tarefa para atender.\n")  # Exibe uma mensagem caso n√£o haja tarefas na fila

def mostrar_tarefas():  # Define uma fun√ß√£o para exibir todas as tarefas na lista principal
    print("\nüìã Lista de Tarefas:")  # Exibe um cabe√ßalho para a lista de tarefas
    for i, t in enumerate(tarefas):  # O enumerate retorna o √≠ndice e o valor de cada elemento da lista 'tarefas'
        print(f"{i + 1}. {t}")  # Exibe o √≠ndice (come√ßando em 1) e o valor de cada tarefa
    print()  # Adiciona uma linha em branco para espa√ßamento

def montar_arquivo():  # Define uma fun√ß√£o para salvar as tarefas em um arquivo de texto
    nome_arquivo = "todo_list.txt"  # Define o nome do arquivo onde as tarefas ser√£o salvas

    if tarefas:  # Verifica se a lista 'tarefas' n√£o est√° vazia
        with open(nome_arquivo, "w") as file:  # O open abre o arquivo no modo de escrita ("w") e o with garante o fechamento autom√°tico
            for item in tarefas:  # Itera sobre cada elemento da lista 'tarefas'
                file.write(item + "\n")  # O m√©todo write escreve o valor 'item' no arquivo, seguido de uma nova linha
        print(f'Tarefas salvas no arquivo {nome_arquivo}!')  # Exibe uma mensagem confirmando a cria√ß√£o do arquivo

while True:  # Inicia um loop infinito que mant√©m o programa em execu√ß√£o at√© que o usu√°rio escolha sair
    print("\nMenu de Op√ß√µes:")  # Exibe o menu de op√ß√µes para o usu√°rio
    print("1. Adicionar Tarefa")  # Mostra a op√ß√£o para adicionar uma nova tarefa
    print("2. Desfazer √öltima Tarefa")  # Mostra a op√ß√£o para desfazer a √∫ltima tarefa adicionada
    print("3. Atender Tarefa (modo fila)")  # Mostra a op√ß√£o para atender a pr√≥xima tarefa na fila
    print("4. Mostrar Tarefas")  # Mostra a op√ß√£o para exibir todas as tarefas pendentes
    print("5. Salvar Tarefas em Arquivo")  # Mostra a op√ß√£o para salvar as tarefas em um arquivo de texto
    print("6. Sair")  # Mostra a op√ß√£o para encerrar o programa

    opcao = input("Escolha uma op√ß√£o: ")  # Solicita ao usu√°rio que insira uma op√ß√£o do menu e armazena como string

    if opcao == '1':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '1'
        tarefa_text = input("Digite a tarefa: ")  # Solicita ao usu√°rio que insira o texto da tarefa e armazena na vari√°vel
        dia = input("Digite o dia (dd): ")  # Solicita ao usu√°rio que insira o dia e armazena na vari√°vel
        mes = input("Digite o m√™s (mm): ")  # Solicita ao usu√°rio que insira o m√™s e armazena na vari√°vel
        ano = input("Digite o ano (yy): ")  # Solicita ao usu√°rio que insira o ano e armazena na vari√°vel
        data_conc = f'{ano}-{mes}-{dia}'  # Formata a data de vencimento no formato 'yy-mm-dd' e armazena na vari√°vel

        # Chama a fun√ß√£o `adicionar_tarefa` para adicionar a tarefa formatada com as datas √† lista de tarefas
        adicionar_tarefa(f'{tarefa_text}, Data final: [{data_conc}]')
    elif opcao == '2':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '2'
        desfazer_ultima_tarefa()  # Chama a fun√ß√£o `desfazer_ultima_tarefa` para remover a √∫ltima tarefa adicionada
    elif opcao == '3':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '3'
        atender_tarefa()  # Chama a fun√ß√£o `atender_tarefa` para processar a pr√≥xima tarefa na fila
    elif opcao == '4':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '4'
        mostrar_tarefas()  # Chama a fun√ß√£o `mostrar_tarefas` para exibir todas as tarefas pendentes
    elif opcao == '5':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '5'
        montar_arquivo()  # Chama a fun√ß√£o `montar_arquivo` para salvar as tarefas em um arquivo de texto
        print("Tarefas salvas com sucesso!")  # Exibe uma mensagem confirmando que as tarefas foram salvas
    elif opcao == '6':  # Verifica se a op√ß√£o escolhida pelo usu√°rio √© '6'
        print("Saindo do programa...")  # Exibe uma mensagem indicando que o programa ser√° encerrado
        break  # Encerra o loop infinito, finalizando o programa
    else:  # Caso o usu√°rio insira uma op√ß√£o que n√£o est√° no menu
        print("Op√ß√£o inv√°lida! Tente novamente.\n")  # Exibe uma mensagem informando que a op√ß√£o √© inv√°lida
